from web3 import Web3
from solcx import compile_source

w3 = Web3(Web3.HTTPProvider('http://127.0.0.1:8545'))

contract_src = '''
pragma solidity ^0.8.0;
contract Token {
    string public name = "MyToken";
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    constructor(uint256 _supply) { totalSupply = _supply; balanceOf[msg.sender] = _supply; }
    function transfer(address to, uint256 amount) public returns (bool) {
        require(balanceOf[msg.sender] >= amount, "Insufficient funds");
        balanceOf[msg.sender] -= amount; balanceOf[to] += amount; return true; }
}
'''

compiled = compile_source(contract_src)
contract_id, contract_interface = compiled.popitem()

Contract = w3.eth.contract(abi=contract_interface['abi'], bytecode=contract_interface['bin'])
account = w3.eth.accounts[0]
txn = Contract.constructor(1000000).buildTransaction({'from': account, 'nonce': w3.eth.getTransactionCount(account)})
signed_txn = w3.eth.account.sign_transaction(txn, private_key='YOUR_PRIVATE_KEY')
tx_hash = w3.eth.sendRawTransaction(signed_txn.rawTransaction)

deployed_contract_address = w3.eth.waitForTransactionReceipt(tx_hash)['contractAddress']
contract_instance = w3.eth.contract(address=deployed_contract_address, abi=contract_interface['abi'])

contract_instance.functions.transfer(w3.eth.accounts[1], 50).transact({'from': account})
print(f"Token Created: {contract_instance.functions.name().call()} (1000000)")
print(f"Treasury Balance: {contract_instance.functions.balanceOf(account).call() / 10**18}")
print(f"Recipient Balance: {contract_instance.functions.balanceOf(w3.eth.accounts[1]).call() / 10**18}")

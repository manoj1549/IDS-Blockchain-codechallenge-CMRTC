def to_minutes(start_hour, start_minute, end_hour, end_minute):
    return start_hour * 60 + start_minute, end_hour * 60 + end_minute

def check_conflict(e1, e2):
    return to_minutes(*e1[1:5])[1] > to_minutes(*e2[1:5])[0] and to_minutes(*e2[1:5])[1] > to_minutes(*e1[1:5])[0]

def suggest_time(e, events):
    end_time = max(to_minutes(*ev[1:5])[1] for ev in events)
    return (end_time // 60, end_time % 60, (end_time + (e[3] - e[2])) // 60, (end_time + (e[3] - e[2])) % 60)

def main():
    events = []
    n = int(input("How many events? "))
    for i in range(n):
        desc = input(f"Event {i+1}: ")
        start_hour, start_minute = map(int, input("Start time (hour minute): ").split())
        end_hour, end_minute = map(int, input("End time (hour minute): ").split())
        events.append((desc, start_hour, start_minute, end_hour, end_minute))

    events.sort(key=lambda x: to_minutes(x[1], x[2], x[3], x[4])[0])

    for e in events:
        print(f"{e[0]} from {e[1]:02}:{e[2]:02} to {e[3]:02}:{e[4]:02}")

    conflicts = []
    for i, e1 in enumerate(events):
        for j, e2 in enumerate(events):
            if i < j and check_conflict(e1, e2):
                conflicts.append((e1[0], e2[0]))
                
                new_time = suggest_time(e2, events[:i+1])
                print(f"\nSuggested time for {e2[0]}: {new_time[0]:02}:{new_time[1]:02} to {new_time[2]:02}:{new_time[3]:02}")

    for c in conflicts:
        print(f"\nConflict between {c[0]} and {c[1]}")

main()
